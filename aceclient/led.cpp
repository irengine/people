#include <time.h>
#include <string.h>
#include <unistd.h>
#include <fstream>

#include "led.h"

static const unsigned char aucCRCHi[] = 
{
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40
};

static const unsigned char aucCRCLo[] = 
{
  0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
  0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
  0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
  0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
  0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
  0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
  0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
  0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
  0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
  0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
  0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
  0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
  0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
  0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
  0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
  0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
  0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
  0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
  0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
  0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
  0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
  0x41, 0x81, 0x80, 0x40
};

unsigned short myCRC16( const unsigned char * data, int usLen)
{
  unsigned char ucCRCHi = 0xFF;
  unsigned char ucCRCLo = 0xFF;
  int iIndex;
  while(usLen--)
  {
    iIndex = ucCRCLo ^ *(data++);
    ucCRCLo = (unsigned char)(ucCRCHi ^ aucCRCHi[iIndex]);
    ucCRCHi = aucCRCLo[iIndex];
  }
  return (unsigned short)(ucCRCHi << 8 | ucCRCLo);
}


//myControlReqFrame//

myControlReqFrame::myControlReqFrame()
{
  m_head = 0x5AA5;
  m_length = sizeof(myControlReqFrame);
  m_type = 0x55;
  m_time_setting = 0;
  m_time_display_period = 0;
  m_line_2_prop = 0;
  m_line_3_prop = 0;
  m_line_4_prop = 0;
  m_port_error_time = 0;
  m_move_speed = 1; //slow
  m_brightness = 0x20;
  
  time_t now = time(NULL);
  struct tm _tm;
  localtime_r(&now, &_tm);
  m_year = _tm.tm_year - 100;
  m_month = _tm.tm_mon + 1;
  m_day = _tm.tm_mday;
  m_hour = _tm.tm_hour;
  m_minute = _tm.tm_min;
  m_second = _tm.tm_sec % 60;
}

void myControlReqFrame::gen_crc16()
{
  m_crc16 = myCRC16((const unsigned char *)&m_head, sizeof(myControlReqFrame) - sizeof(unsigned short));
}

//myControlReplyFrame//

bool myControlReplyFrame::valid()
{
  return (m_head == 0x5AA5 && m_length == sizeof(myControlReplyFrame) && m_type == 0xC5);

}


//myStaticDisplayReqFrame//

myStaticDisplayReqFrame::myStaticDisplayReqFrame()
{
  m_head = 0x5AA5;
  m_length = 0;
  m_type = 0x52;
  m_line_no = 0;
  m_display_mode = 0x01;
  m_info_no = 0;
  m_info_id = 0;
  for (int i = 0; i < 6; ++ i)
    m_time_expire[i] = 0;
  m_info_length = 0;
}

void myStaticDisplayReqFrame::gen_crc16()
{
  int len = length();
  *(unsigned short*)(data() + len - 2) = myCRC16((const unsigned char *)&m_head, len - 2);
}

void myStaticDisplayReqFrame::setinfo(const char * txt)
{
  if (!txt || !*txt)
    return;
  int len = strlen(txt);
  if (len > 384)
    len = 384;
  memcpy(m_data, txt, len);  
  m_info_length = len;
  m_length = length();    
}


//myStaticDisplayReplyFrame//

myStaticDisplayReplyFrame::myStaticDisplayReplyFrame()
{
  memset(data(), length(), 0);
}

void myStaticDisplayReplyFrame::gen_crc16()
{

}

bool myStaticDisplayReplyFrame::valid() const
{
  return (m_head == 0xA55A && m_type == 0xC2 && m_length == length() && m_info_id == 0);
}


//MyApp//

MyApp::MyApp(int port)
{
  m_port = port;
  m_fd = -1;
}

bool MyApp::init()
{
  m_fd = open_port(m_port);
  if (m_fd == -1)
    return false;
  return setup_port(m_fd, 19200, 8, 'N', 1) != -1;
}

void MyApp::clean_up()
{
  if (m_fd == -1)
    return;
  close_port(m_fd);
  m_fd = -1;
}

bool MyApp::check_open()
{
  if (m_fd != -1)
    return true;
  return init();
}

bool MyApp::read_text()
{
  const char * LED_FILE = "/tmp/daily/5/led.txt";
  std::ifstream ifs(LED_FILE);
  if (!ifs || ifs.bad())
    return false;

  const int BLOCK_SIZE = 400;
  char buff[BLOCK_SIZE];
  ifs.getline(buff, BLOCK_SIZE - 1);
  buff[BLOCK_SIZE - 1] = 0;
  int len = strlen(buff);
  while (len > 0 && (buff[len - 1] == '\r' || buff[len - 1] == '\n' || buff[len - 1] == ' '))
    buff[--len] = 0;
  std::string s(buff);
  bool ret = (s.compare(m_value) != 0);
  if (ret)
    m_value = s;
  return ret;
}

bool MyApp::has_text() const
{
  return m_value.length() > 0;
}

bool MyApp::read_port(char * data, int len)
{
  if (len <= 0)
    return false;
  int m = 0, n, can_try = 10;
  while (len > m)
  {
    n = read(m_fd, data + m, len - m);
    if (n > 0)
      m += n;
    if (len > m)
    {
      if (--can_try >= 0)
        sleep(1);  
      else
        return false;  
    }  
  }
  
  return len == m;    
}
  
bool MyApp::display_text()
{
  if (!check_open())
    return false;
    
  myStaticDisplayReqFrame req;
  req.setinfo(m_value.c_str());
  req.gen_crc16();
  if (write(m_fd, req.data(), req.length()) != req.length())
  {
    unix_print_error("write of static frame failed");
    return false;
  }
  
  myStaticDisplayReplyFrame reply;
  if (!read_port(reply.data(), reply.length()))
    return false;
  return reply.valid();  
}

bool MyApp::led_control(unsigned char line_1_prop, unsigned char op)
{
  if (!check_open())
    return false;
    
  myControlReqFrame req;
  req.m_line_1_prop = line_1_prop;
  req.m_op = op;
  req.gen_crc16();
  if (write(m_fd, req.data(), req.length()) != req.length())
  {
    unix_print_error("write of control frame failed");
    return false;
  }
  
  myControlReplyFrame reply;
  if (!read_port(reply.data(), reply.length()))
    return false;
  return reply.valid();  
}


//application//

int main(int argc, const char * argv[])
{
  return 0;
}

